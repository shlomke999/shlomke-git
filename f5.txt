local traffic->virtual servers->security->policies->log profile, there you choose what to log for each server.

waf - check both rquest and response packets,
parameter tampering, 
attack signatures to your specific language, 
ltm - local traffic manager (load balancer),
security policies (block http delete method allow only get/post/head), 
the f5 is a proxy - a 3 way handshake is made from the client to the f5, and then from the f5 to the web application.
api protection,
bot detection,
behavior analysis,
can be integrated with vulnerabilty scaning tools and when those generate a vulnerability report f5 will build a policy to mitigate that vulnerability,
data guard - hides sensitive info in server responses to prevent data leak,


positive security policy -check if the request has allowed file types, url length, and parameters, and if the response has allowed response code.
negative security policy - check if the request violates rfc compliance, if it's trying to avoid detection, or attack signatures, and the response has data leak or attack signatures.


security policy workflow: policy name -> policy type (stand alone/parent) -> policy template (automatic/manual) -> the web server to assign the policy to.
policy templates:
rapid deployment, a manual policy, it's quick to configure, baseline of negative security model, (but can also integrate positive). 
fundamental - moderate protection, the waf will examine the traffic to enforce filetype, parameter, cookies
comprehensive - highest protection using positive policy model that only allows what was defined in the policy
application ready - use predefine template specific to that application
vulnerabilty baseline assesment template - build policy to fix a vuln found by a third party vuln scanner integrated to the f5
passive template - a policy that will only log the violation but won't block the traffic.

advance security policy workflow: learning mode->enforcement mode(block/transparent)->app language(Unicode)->server techs->enforcement readiness period->signature staging
learning modes: automatic - obser
ve traffic and accept suggestions while they reach 100%, manual - require admin to accept the suggestion, disable - don't create suggestio
 server technology - linux/apache/ etc
enforcement readiness period - testing period for the policy for false positives, and to learn the traffic flow
signature staging - staging period for attack signatures

entity violation - violation in http components e.g. cookies ,url ,parameter ,file type
item violation - attack signatures ,defense invasion ,data guard
violation ratings: 1 - no violation, 2-3 probably fp, 4 - look like a threat, 5 - definitely a threat
in the violation details there's a support id so if a legitimate user request is blocked he can give you the support id shoen in his browser and you can filter to find it in f5

if we want to block traffic that matches the policy: 1.security policy->blocking (not transparrent) 2. attack signatures->enforced (not staging)

learning schemes:
1.  wildcard - will not suggest learning . 
2. always - always create a learning for any new object so the admin can choose to add them
3. selective -  only stuff like if you defined max length 0f 50MB it will suggest to increase when a longer one appears for the first time
	   	  												 
steps to create positive policy for parameters (static):
1. create a comprehensive policy and attach it to a server
2.go to policy building->learning and blocking settings->parameters and in learn new parameters choose always
3. then when a parameter is used you can accept it in the policy building->traffic learning section
4. then go to parameters list and choose the parameter, and define what values you consider legitimate for that parameter (length, numeric etc), and other stuff will be a violation

steps to create positive policy for parameters (dynamic - parameter extraction):
the ways asm extract parameters are: entire form/search in link/xml/search response body
1. create a comprehensive policy and attach it to a server
2. go to policy building->learning and blocking settings->file types and choose alwayse learn, then make sure to accept the file type in which the parameters are(php mostly) and also accept one parameter on that page
3. go to the parameter (parameters->parameters list), choose the parameter and in parameter value type choose dynamic content value
4.  then a pop up will show to add extraction configuration, choose the file type(php in our case), and in url the php page name (sales.php), and choose extraction method (links,xml,entire form..) and apply the policy
 then asm will recognize any violations on that parameter.

steps to create positive policy for cookie tempering (seesion hijacking):
1. create a comprehensive policy and attach it to a server
2.go to policy building->learning and blocking settings->parameters and in learn new cookies choose selective
3. then when a cookie is used you can accept it in the policy building->traffic learning section
4. then go to  application security->headers->cookie list and enforce that cookie to block tempering and not only trigger a violation

steps to create positive policy for http methods:
1. create a comprehensive policy and attach it to a server
2. go to policy building->learning and blocking settings->headers and save it
3. then when forbitten methods are used (the allowed ones are in headers->methods) it will throw a violation/block

steps to create positive policy for file types:
1. create a comprehensive policy and attach it to a server
2.go to policy building->learning and blocking settings->file types and in learn new file types choose always
3. then when there's a new file type you can accept it in traffic learning, and it will be added to the allowed file types list

logging:
1. go to event logs->logging profiles to create a new logging profile (if you want to, you can use an existing one too)  
2. go to each virtual server and in log profile add that logging profile to it so it will log accordingly and press update.
3. by default only administrative changes are logged localy, and violations and stuff are sent to the remote syslog server.
 to change it go to options->app security->advance configuration->system variables, search the word send and the variable send_content_events will pop, change it to 1

diff:
used to check the differences between 2 policies. (the policies must have the same language,protocol,case sensitivity).
go to security policies->policy diff. after you check the diffs you have auto merge button with various options.

layered policies:
parent child policies, you can inherit many childs the parend settings and attach them to different servers, the parent can't ne attach to server.
option 1 - mandatory: attributes in parrent inherit to child and can't be changed in the child policy.
option 2 - optional: attributes in parrent inherit to child and can be change in child policy
option3 - none: no inheritence. 

brute force policy:
1. create a rapid deployment policy and attach it to a server
2. go to brute force attack prevention, select that policy, and press the create button and put the name of the login page(login.php) in login page
3. expected http response code is 302, and press create. then fill the detailes as you wish to act

session tracking policy:
1. create a rapid deployment policy and attach it to a server
2. go to sessions and logins->session tracking and choose that policy
3. on session awareness check the enabled button,and create a login page like the 2nd step of brute force policy.
4. then fill the detailes as you wish. and then you will see in all the requests to that page that there's a session id for tracking it
5. after the violation threshhold you defined for that page has reached all requests  (even those not triggered a violation) of that session will be logged/blocked (depends if you chose block all/log all requests)

geolocation policy:
 1. create a rapid deployment policy and attach it to a server
2. go to policy list and select that policy, on trust XFF header choose enabled, and write XFF_Russia in the text box
3.go to geolocation enforcement and and the contries you want to block
